<html>
    <body>
        Waiting for responses from identity server and validate response and forward to requested URI.
        <%
            (function () {
                var site = require("/tracker.json");
                include('/jagg/jagg.jag');
                include('/jagg/constants.jag');
                include('/jagg/config_reader.jag');

                var log = new Log();

                var samlResponse = request.getParameter("SAMLResponse");
                var sessionId = session.getId();
                var samlRequest = request.getParameter("SAMLRequest");

                // create a sso relying party js object
                var security = require("sso");
                var ssoRelyingParty = new security.SSORelyingParty(site.ssoConfiguration.issuer);
                var isLogoutResponse = false;
                var isLogoutRequest = false;
                var issueTracker = require("issueTracker");

                // if saml response is not a log out response
                if (samlResponse != null) {
                    isLogoutResponse = ssoRelyingParty.isLogoutResponse(samlResponse);

                    if (!Boolean(isLogoutResponse)) {
                        // relay state value should be a valid value, this value is mapped with request uri.
                        var relayState = request.getParameter("RelayState");
                        var requestedURI = ssoRelyingParty.getRelayStateProperty(relayState);
                        if (requestedURI == null) {
                            log.error("Relaystate value is invalid.");
                            response.sendRedirect("../error.jag");
                            return;
                        }

                        // validating the signature
                        if(site.ssoConfiguration.responseSigningEnabled === 'true'){
                            var tenantRegistry = new issueTracker.LoadTenantRegistry();
                            tenantRegistry.loadTenant(samlResponse);

                            var isSignatureValid = ssoRelyingParty.validateSignature(samlResponse);
                            if (!Boolean(isSignatureValid)) {
                                log.error("SAML response signature is verification failed.");
                                response.sendRedirect("../error.jag");
                                return;
                            }
                        }
                        ssoRelyingParty.setSessionAuthenticated(sessionId, samlResponse);
                        session.put("showLogin", "false");
                        var user = ssoRelyingParty.getLoggedInUser(sessionId);

                        user = user.split("@");
                        userName = user[0];
                        domain = user[1];

                        context.put(LOGGED_IN_USER, userName);
                        context.put(DOMAIN, domain);
                        context.put(ISSUE_TRACKER_URL, getProperty(ISSUE_TRACKER_URL));

                        context.put(IS_LOGGED,true);
                        response.sendRedirect(requestedURI);
                    } else {
                        // if the saml response is log out request from IDP, we log out from web app.
                        ssoRelyingParty.invalidateSessionBySessionId(sessionId);
                        session.invalidate();
                        response.sendRedirect("../");
                        return;
                    }

                }

                // if saml request is a log out request, then invalidate session.
                if (samlRequest != null) {
                    isLogoutRequest = ssoRelyingParty.isLogoutRequest(samlRequest);
                    if (Boolean(isLogoutRequest)) {
                        ssoRelyingParty.invalidateSessionBySAMLResponse(samlRequest);
                        session.invalidate();
                    }
                }

            }());
        %>
    </body>
</html>
